#!/usr/bin/env python3
import os
import re
from pathlib import Path

def fix_copyright_header(file_path):
    """Fix copyright header for a single file"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # Skip if it already has correct copyright header
        if content.startswith("// Copyright (c) The University of Dundee 2018-"):
            return False, "Already has correct copyright header"

        # Skip if it's auto-generated
        if content.startswith("// <autogenerated />"):
            return False, "Auto-generated file"

        # Skip if it's the CodeProject adaptation
        if "This code is adapted from https://www.codeproject.com" in content:
            return False, "CodeProject adaptation"

        # Skip AssemblyInfo files that use assembly attributes
        if "AssemblyCopyright" in content and file_path.name.endswith("AssemblyInfo.cs"):
            return False, "AssemblyInfo.cs with assembly attributes"

        # Get current year
        current_year = "2025"

        # Create new copyright header
        new_header = f"""// Copyright (c) The University of Dundee 2018-{current_year}
// This file is part of the Research Data Management Platform (RDMP).
// RDMP is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
// RDMP is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with RDMP. If not, see <https://www.gnu.org/licenses/>.

"""

        # Write the updated file
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(new_header + content)

        return True, "Fixed copyright header"

    except Exception as e:
        return False, f"Error: {e}"

def main():
    """Fix copyright headers for C# files in Plugins directory"""
    plugins_dir = Path("Plugins")

    # Files to ignore
    ignore_patterns = [
        '.Designer.cs',
        'Program.cs',
        'Settings.Designer.cs',
        'Class1.cs',
        'Images.Designer.cs',
        'ToolTips.Designer.cs',
        'Resources.Designer.cs',
        'ProjectInstaller.cs',
        'ProjectInstaller.Designer.cs',
        'TableView.cs',
        'TreeView.cs',
        'AssemblyInfo.cs'
    ]

    fixed_files = []
    skipped_files = []

    print("Scanning for C# files in Plugins directory that need copyright headers...")

    for cs_file in plugins_dir.rglob("*.cs"):
        # Skip ignored files
        if any(pattern in cs_file.name for pattern in ignore_patterns):
            continue

        # Skip git and build directories
        if '.git' in str(cs_file) or 'obj' in str(cs_file) or 'bin' in str(cs_file):
            continue

        was_fixed, reason = fix_copyright_header(cs_file)

        if was_fixed:
            fixed_files.append(str(cs_file))
            print(f"âœ“ Fixed: {cs_file}")
        else:
            skipped_files.append(f"{cs_file} - {reason}")

    print(f"\nSummary:")
    print(f"Fixed {len(fixed_files)} files")
    print(f"Skipped {len(skipped_files)} files")
        print("\nFirst 10 skipped files:")
        for reason in skipped_files[:10]:
            print(f"  {reason}")

    if fixed_files:
        print("\nFixed files:")
        for file in fixed_files:
            print(f"  {file}")

if __name__ == '__main__':
    main()