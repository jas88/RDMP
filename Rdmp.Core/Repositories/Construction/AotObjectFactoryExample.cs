// Copyright (c) The University of Dundee 2018-2019
// This file is part of the Research Data Management Platform (RDMP).
// RDMP is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
// RDMP is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with RDMP. If not, see <https://www.gnu.org/licenses/>.

using System;
using Rdmp.Core.Attributes;

namespace Rdmp.Core.Repositories.Construction;

/// <summary>
/// Example classes demonstrating AOT factory usage
/// These classes will have optimized factory delegates generated by the source generator
/// </summary>

#region Example Classes for AOT Factory Generation

/// <summary>
/// Example class with a parameterless constructor
/// </summary>
[GenerateAotFactory]
public class ExampleBlankConstructor
{
    public string CreatedAt { get; }

    public ExampleBlankConstructor()
    {
        CreatedAt = DateTime.UtcNow.ToString("O");
    }
}

/// <summary>
/// Example class with a single parameter constructor
/// </summary>
[GenerateAotFactory]
public class ExampleSingleParameter
{
    public string Name { get; }
    public int Value { get; }

    public ExampleSingleParameter(string name)
    {
        Name = name;
        Value = name?.Length ?? 0;
    }
}

/// <summary>
/// Example class with a double parameter constructor
/// </summary>
[GenerateAotFactory]
public class ExampleDoubleParameter
{
    public string Identifier { get; }
    public DateTime Timestamp { get; }
    public bool IsActive { get; }

    public ExampleDoubleParameter(string identifier, DateTime timestamp)
    {
        Identifier = identifier;
        Timestamp = timestamp;
        IsActive = true;
    }
}

/// <summary>
/// Example class with multiple constructors and priority specification
/// </summary>
[GenerateAotFactory(Priority = 10)]
public class ExampleMultipleConstructors
{
    public string Source { get; }
    public int Priority { get; }

    public ExampleMultipleConstructors()
    {
        Source = "Default";
        Priority = 0;
    }

    [UseWithAotFactory(Priority = 5)]
    public ExampleMultipleConstructors(string source)
    {
        Source = source;
        Priority = 5;
    }

    [UseWithAotFactory(Priority = 10)]
    public ExampleMultipleConstructors(string source, int priority)
    {
        Source = source;
        Priority = priority;
    }
}

/// <summary>
/// Example class that demonstrates complex parameter handling
/// </summary>
[GenerateAotFactory(Priority = 1, IncludeNonPublicConstructors = false)]
public class ExampleWithRepository
{
    private readonly IRDMPPlatformRepositoryServiceLocator _serviceLocator;
    public string ConfigName { get; }

    public ExampleWithRepository(IRDMPPlatformRepositoryServiceLocator serviceLocator)
    {
        _serviceLocator = serviceLocator;
        ConfigName = "Default";
    }

    [UseWithAotFactory(Priority = 10)]
    public ExampleWithRepository(IRDMPPlatformRepositoryServiceLocator serviceLocator, string configName)
    {
        _serviceLocator = serviceLocator;
        ConfigName = configName;
    }
}

/// <summary>
/// Example class showing variable parameter factory generation
/// </summary>
[GenerateAotFactory(GenerateVariableFactory = true)]
public class ExampleVariableParameters
{
    public object[] Parameters { get; }

    public ExampleVariableParameters()
    {
        Parameters = Array.Empty<object>();
    }

    public ExampleVariableParameters(string param1)
    {
        Parameters = new object[] { param1 };
    }

    public ExampleVariableParameters(string param1, int param2)
    {
        Parameters = new object[] { param1, param2 };
    }

    public ExampleVariableParameters(params object[] parameters)
    {
        Parameters = parameters ?? Array.Empty<object>();
    }
}

#endregion

#region Usage Examples

/// <summary>
/// Example class showing how to use the AOT object factory system
/// </summary>
public static class AotObjectFactoryUsageExamples
{
    /// <summary>
    /// Example 1: Basic AOT object construction
    /// </summary>
    public static void BasicUsage()
    {
        // Initialize the AOT factory registry (loads generated factories)
        AotObjectFactoryRegistry.Initialize();

        // Create objects using AOT constructor (automatically uses AOT when available)
        var blankObj = AotObjectConstructor.Construct(typeof(ExampleBlankConstructor));
        var singleObj = AotObjectConstructor.Construct(typeof(ExampleSingleParameter), "test");
        var doubleObj = AotObjectConstructor.Construct(
            typeof(ExampleDoubleParameter),
            "example",
            DateTime.UtcNow);

        Console.WriteLine($"Blank constructor: {blankObj.GetType().Name}");
        Console.WriteLine($"Single parameter: {singleObj.GetType().Name}");
        Console.WriteLine($"Double parameter: {doubleObj.GetType().Name}");
    }

    /// <summary>
    /// Example 2: Performance comparison
    /// </summary>
    public static void PerformanceComparison()
    {
        // Reset statistics
        AotObjectConstructor.ResetStatistics();

        // Create many objects to see performance benefits
        for (int i = 0; i < 1000; i++)
        {
            AotObjectConstructor.Construct(typeof(ExampleBlankConstructor));
            AotObjectConstructor.Construct(typeof(ExampleSingleParameter), $"item_{i}");
        }

        // Get usage statistics
        var stats = AotObjectConstructor.GetUsageStatistics();
        Console.WriteLine($"Total constructions: {stats.TotalConstructions}");
        Console.WriteLine($"AOT constructions: {stats.AotConstructions}");
        Console.WriteLine($"Reflection constructions: {stats.ReflectionConstructions}");
        Console.WriteLine($"AOT usage percentage: {stats.GetAotUsagePercentage():F1}%");
    }

    /// <summary>
    /// Example 3: Custom factory registration
    /// </summary>
    public static void CustomFactoryRegistration()
    {
        // Register a custom factory
        AotObjectFactoryRegistry.RegisterBlankConstructorFactory<ExampleBlankConstructor>(() =>
            new ExampleBlankConstructor());

        // Register a single parameter factory
        AotObjectFactoryRegistry.RegisterSingleParameterFactory<ExampleSingleParameter, string>(
            (name) => new ExampleSingleParameter(name));

        // Check if factory is registered
        bool hasFactory = AotObjectConstructor.HasAotFactory(typeof(ExampleBlankConstructor));
        Console.WriteLine($"ExampleBlankConstructor has AOT factory: {hasFactory}");
    }

    /// <summary>
    /// Example 4: Migration analysis
    /// </summary>
    public static void MigrationAnalysis()
    {
        var config = new ObjectConstructorMigration.MigrationConfig
        {
            PerformanceTestIterations = 1000,
            ValidateOutput = true,
            GenerateSuggestions = true,
            IncludedNamespaces = new List<string> { "Rdmp.Core.Repositories.Construction" }
        };

        var result = ObjectConstructorMigration.AnalyzeMigration(
            typeof(AotObjectFactoryUsageExamples).Assembly, config);

        Console.WriteLine($"Migration Analysis Results:");
        Console.WriteLine($"  Total types analyzed: {result.Statistics.TotalTypes}");
        Console.WriteLine($"  Types with AOT factories: {result.Statistics.TypesWithAotFactories}");
        Console.WriteLine($"  Candidate types: {result.Statistics.CandidateTypes}");
        Console.WriteLine($"  Potential AOT coverage: {result.Statistics.PotentialAotCoverage:F1}%");

        if (result.SuggestedAttributes.Any())
        {
            Console.WriteLine($"  Suggested attributes to add: {result.SuggestedAttributes.Count}");
        }
    }

    /// <summary>
    /// Example 5: Performance benchmarking
    /// </summary>
    public static async Task PerformanceBenchmarking()
    {
        var config = new AotObjectFactoryBenchmark.BenchmarkConfig
        {
            WarmupIterations = 100,
            BenchmarkIterations = 1000,
            ValidateOutputs = true,
            CollectMemoryStats = true,
            RunParallel = true
        };

        var report = await AotObjectFactoryBenchmark.RunBenchmark(
            typeof(AotObjectFactoryUsageExamples).Assembly, config);

        // Generate and display report
        var reportText = AotObjectFactoryBenchmark.GenerateReport(report);
        Console.WriteLine(reportText);

        // Get recommendations
        var recommendations = AotObjectFactoryBenchmark.GenerateRecommendations(report);
        Console.WriteLine("\nRecommendations:");
        foreach (var rec in recommendations)
        {
            Console.WriteLine($"  â€¢ {rec}");
        }
    }

    /// <summary>
    /// Example 6: Fallback behavior
    /// </summary>
    public static void FallbackBehavior()
    {
        // Try to construct a type without AOT factory
        var regularObj = AotObjectConstructor.Construct(typeof(object));

        // This will automatically fall back to reflection-based ObjectConstructor
        Console.WriteLine($"Created {regularObj.GetType().Name} using fallback");

        // Check statistics to see fallback was used
        var stats = AotObjectConstructor.GetUsageStatistics();
        Console.WriteLine($"Reflection constructions: {stats.ReflectionConstructions}");
    }
}

#endregion

#region Integration Examples

/// <summary>
/// Example showing how to integrate AOT ObjectConstructor into existing RDMP code
/// </summary>
public static class RdmpIntegrationExamples
{
    /// <summary>
    /// Example of replacing ObjectConstructor calls with AotObjectConstructor
    /// </summary>
    /// <param name="repository">Repository instance</param>
    public static void ReplaceObjectConstructorUsage(ICatalogueRepository repository)
    {
        // Old code (reflection-based):
        // var obj = ObjectConstructor.Construct(typeof(SomeClass), repository);

        // New code (AOT-enabled):
        var obj = AotObjectConstructor.Construct(typeof(ExampleWithRepository), repository);

        // The API is identical, but AOT factories will be used when available
        Console.WriteLine($"Created {obj?.GetType().Name} with AOT-enabled constructor");
    }

    /// <summary>
    /// Example of database entity construction
    /// </summary>
    /// <param name="repository">Repository instance</param>
    /// <param name="reader">Data reader</param>
    public static void DatabaseEntityConstruction(ICatalogueRepository repository, System.Data.Common.DbDataReader reader)
    {
        // This method maintains the same signature as the original ObjectConstructor
        // but uses AOT factories when available for IMapsDirectlyToDatabaseTable objects

        // Old code:
        // var entity = ObjectConstructor.ConstructIMapsDirectlyToDatabaseObject(repository, reader);

        // New code:
        // Note: This would work with actual DatabaseEntity types that have AOT factories
        // var entity = AotObjectConstructor.ConstructIMapsDirectlyToDatabaseObject(repository, reader);
    }

    /// <summary>
    /// Example of gradual migration strategy
    /// </summary>
    public static void GradualMigrationStrategy()
    {
        // Step 1: Replace ObjectConstructor with AotObjectConstructor in key locations
        // Step 2: Add [GenerateAotFactory] attributes to frequently used classes
        // Step 3: Monitor performance with AotObjectConstructor.GetUsageStatistics()
        // Step 4: Run migration analysis to identify remaining opportunities
        // Step 5: Continue adding AOT attributes based on usage patterns and performance needs

        Console.WriteLine("Gradual migration strategy implemented");
    }
}

#endregion