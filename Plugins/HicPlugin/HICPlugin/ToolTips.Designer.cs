//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HICPlugin {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ToolTips {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ToolTips() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("HICPlugin.ToolTips", typeof(ToolTips).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rules are applied incrementally, the value displayed in the &apos;1-0 Errors&apos; label is the number of records (not identifiers or distinct identifiers!) in the imported file which cannot be mapped to ANY records in the mapping table using the current rules
        ///
        ///In the example above we can see that because of a misspelling of &apos;SocialCare&apos; to &apos;Soc&apos; in our mapping table the first record does not match the rules and results in no substitution (an error)
        ///
        ///Notice that first rule is showing all success and in-fact subst [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string _1To0 {
            get {
                return ResourceManager.GetString("_1To0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rules are applied incrementally, the value displayed in the &apos;1-M Errors&apos; label is the number of records (not identifiers or distinct identifiers!) in the imported file which currently map to MORE THAN 1 distinct substitution value (in the column you are doing the substitution into).
        ///
        ///In the example above we see that a composite key is required for mapping, with only one rule each record maps to 2 different PrivateIdentifiers in the mapping table (this can be resolved by adding the DataSource as an additio [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string _1ToM {
            get {
                return ResourceManager.GetString("_1ToM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rules are applied incrementally, the value displayed in the &apos;M-1 Errors&apos; label is the number of records (not identifiers or distinct identifiers!) in the imported file which currently map to to the SAME distinct substitute value (in the mapping table) as another source value (i.e. there are 2+ distinct source values which will be substituted for the SAME substitute value resulting in data loss)
        ///
        ///In the example above someone has accidentally run an UPDATE command on the mapping table and nuked all the Priv [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MTo1 {
            get {
                return ResourceManager.GetString("MTo1", resourceCulture);
            }
        }
    }
}
